! sa_ltad_cool2.cns
!   Perform the second simulation annealing stage of it1
!
! ***********************************************************************
! * Copyright 2003-2022 Alexandre Bonvin, Utrecht University.           *
! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

evaluate ($ncycle = 10)

evaluate ($asy_add = ($Data.asy_cool2-$Data.asy_cool1)/$ncycle)
evaluate ($masy_add = ($Data.masy_cool2-$Data.masy_cool1)/$ncycle)

evaluate ($asy=$Data.asy_cool1)
evaluate ($masy=$Data.masy_cool1)

noe
    rswitch ambi $Data.Rswi_cool1
    rswitch dist $Data.Rswi_cool1
    rswitch hbon $Data.Rswi_cool1

    mrswitch ambi $Data.mRswi_cool1
    mrswitch dist $Data.mRswi_cool1
    mrswitch hbon $Data.mRswi_cool1

    asym ambi $Data.asy_cool1
    asym dist $Data.asy_cool1
    asym hbon $Data.asy_cool1

    masym ambi $Data.masy_cool1
    masym dist $Data.masy_cool1
    masym hbon $Data.masy_cool1
end

restraints dihedral scale=$Data.dihedrals_cool2   end


evaluate ($interstep = ($SaProtocol.inter_fin_cool2 - $SaProtocol.inter_init_cool2)/($ncycle-1))
evaluate ($kinter = $SaProtocol.inter_init_cool2)

evaluate ($tempstep = ($SaProtocol.t2_init - $SaProtocol.t2_final)/$ncycle)
evaluate ($calcsteps = int($SaProtocol.cool2_steps/$ncycle))
evaluate ($printsteps = int($calcsteps / 4))
evaluate ($timestep = $SaProtocol.timestep*$SaProtocol.tadfactor)

if ($Data.unambig_cool1 = 0) then
    evaluate ($Data.unambig_cool1 = 0.000001)
end if
if ($Data.unambig_cool2 = 0) then
    evaluate ($Data.unambig_cool2 = 0.000001)
end if
if ($Data.ambig_cool1 = 0) then
    evaluate ($Data.ambig_cool1 = 0.000001)
end if
if ($Data.ambig_cool2 = 0) then
    evaluate ($Data.ambig_cool2 = 0.000001)
end if
if ($Data.hbond_cool1 = 0) then
    evaluate ($Data.hbond_cool1 = 0.000001)
end if
if ($Data.hbond_cool2 = 0) then
    evaluate ($Data.hbond_cool2 = 0.000001)
end if

evaluate ($k_unamb= $Data.unambig_cool1)
evaluate ($unambig_fac = ($Data.unambig_cool2/$Data.unambig_cool1)^(1/$ncycle))
evaluate ($k_amb= $Data.ambig_cool1)
evaluate ($ambig_fac = ($Data.ambig_cool2/$Data.ambig_cool1)^(1/$ncycle))
evaluate ($k_hbond= $Data.hbond_cool1)
evaluate ($hbond_fac = ($Data.hbond_cool2/$Data.hbond_cool1)^(1/$ncycle))


evaluate ($bath  = $SaProtocol.t2_init)
do (vx=maxwell($bath)) ( all )
do (vy=maxwell($bath)) ( all )
do (vz=maxwell($bath)) ( all )

evaluate ($reassign = TRUE)
evaluate ($i_cool = 0)
while ($i_cool < $ncycle) loop cool

    evaluate ($i_cool=$i_cool+1)

    evaluate ($bath  = $bath  - $tempstep)
    evaluate ($k_unamb = $k_unamb*$unambig_fac)
    evaluate ($k_amb = $k_amb*$ambig_fac)
    evaluate ($k_hbond = $k_hbond*$hbond_fac)
    evaluate ($asy=$asy+$asy_add)
    evaluate ($masy=$masy+$masy_add)


    noe
        scale dist $k_unamb
        scale ambi $k_amb
        scale hbon $k_hbond
        asym ambi $asy
        asym dist $asy
        asym hbon $asy
        masym ambi $masy
        masym dist $masy
        masym hbon $masy
    end

    !scale intermolecular interactions:
    inline @MODULE:scale_inter.cns
    evaluate ($kinter = $kinter + $interstep)

    dyna tors
        reassign $reassign
        timestep=$timestep
        nstep=$calcsteps
        nprint=$printsteps
        ntrfrq=0
        tcoupling = true  temperature = $bath
    end
    evaluate ($reassign = FALSE)

    energy end
    if ($ener > 99999999) then
        display ENERGY PROBLEM, THE SYSTEM IS BLOWING UP: ==> STOPPING
        stop
    end if

end loop cool

