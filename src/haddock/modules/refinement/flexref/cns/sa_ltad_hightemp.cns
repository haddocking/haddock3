! sa_ltad_hightemp.cns
!    Perform the high-temperature rigid-body MD of it1
!
! ***********************************************************************
! * Copyright 2003-2022 Alexandre Bonvin, Utrecht University.           *
! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

evaluate ($calcsteps= $SaProtocol.initiosteps)
evaluate ($printsteps= max(int($calcsteps/10),1))

noe
    rswitch ambi $Data.Rswi_hot
    rswitch dist $Data.Rswi_hot
    rswitch hbon $Data.Rswi_hot

    mrswitch ambi $Data.mRswi_hot
    mrswitch dist $Data.mRswi_hot
    mrswitch hbon $Data.mRswi_hot

    asym ambi $Data.asy_hot
    asym dist $Data.asy_hot
    asym hbon $Data.asy_hot

    masym ambi $Data.masy_hot
    masym dist $Data.masy_hot
    masym hbon $Data.masy_hot
end

evaluate ($bath = $SaPRotocol.tadhigh_t)
evaluate ($timestep = $SaProtocol.timestep*$SaProtocol.tadfactor)

do (vx = maxwell($bath)) (all)
do (vy = maxwell($bath)) (all)
do (vz = maxwell($bath)) (all)


restraints dihedral scale $Data.dihedrals_hot end

evaluate ($reassign = TRUE)

noe
    scale dist  $Data.unambig_hot
    scale ambi  $Data.ambig_hot
    scale hbon  $Data.hbond_hot
end

evaluate ($kinter = $SaProtocol.inter_init_rigid)
inline @MODULE:scale_inter.cns

dyna tors
    reassign $reassign
    timestep=$timestep
    nstep=$calcsteps
    nprint=$printsteps
    ntrfrq=0
    tcoupling = true  temperature = $bath
end

evaluate ($reassign = FALSE)
