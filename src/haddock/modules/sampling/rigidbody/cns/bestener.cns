! bestener.cns
!   Store best score model from rigid-body dooking (it0)
!   Version supporting only distance-based restraints
!
! ***********************************************************************
! * Copyright 2003-2022 Alexandre Bonvin, Utrecht University.           *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!
eval ($kinter = 1.0)
@MODULE:scale_inter_mini.cns

evaluate ($unambig_scale = $Data.unambig_scale)
evaluate ($ambig_scale = $Data.ambig_scale)
evaluate ($hbond_scale = $Data.hbond_scale)

noe 
    scale dist $unambig_scale 
    scale ambi $ambig_scale
    scale hbon $hbond_scale
    scale symm 0.0
end

evaluate ($ener = 0.0)
evaluate ($vdw  = 0.0)
evaluate ($elec = 0.0)
evaluate ($noe  = 0.0)
evaluate ($coll = 0.0)
evaluate ($eair = 0.0)
evaluate ($cdih = 0.0)
evaluate ($vean = 0.0)
evaluate ($sani = 0.0)
evaluate ($xrdc = 0.0)
evaluate ($xpcs = 0.0)
evaluate ($dani = 0.0)
evaluate ($esym = 0.0)
evaluate ($zhar = 0.0)
evaluate ($bsa  = 0.0)
evaluate ($desolv = 0.0)
evaluate ($lcc = 0.0)

energy end
evaluate ($eair = $noe)

if ($Data.flags.sym eq true) then
    noe
        scale * 0.0
        scale symm $Data.ksym
    end
    energy end
    evaluate ($esym = $noe)
end if

if ($SaProtocol.rigidtrans eq true) then
    inline @MODULE:bsa.cns
end if

evaluate ($etot = $w_vdw  * $vdw)
evaluate ($etot = $etot + $w_elec * $elec)
evaluate ($etot = $etot + $w_air  * $eair)
evaluate ($etot = $etot + $w_rg   * $coll)
evaluate ($etot = $etot + $w_cdih * $cdih)
evaluate ($etot = $etot + $w_sani * $sani)
evaluate ($etot = $etot + $w_xrdc * $xrdc)
evaluate ($etot = $etot + $w_xpcs * $xpcs)
evaluate ($etot = $etot + $w_dani * $dani)
evaluate ($etot = $etot + $w_vean * $vean)
evaluate ($etot = $etot + $w_sym  * $esym)
evaluate ($etot = $etot + $w_zres * $zhar)
evaluate ($etot = $etot + $w_bsa  * $bsa)
evaluate ($etot = $etot + $w_desolv * $desolv)
evaluate ($etot = $etot + $w_lcc * $lcc)

if ($nfirst = 1) then
    evaluate ($bestener = $etot)
    evaluate ($bestair = $eair)
    do (refx = x) (all)
    do (refy = y) (all)
    do (refz = z) (all)
    evaluate ($nfirst = 0)
    ident (store3) (not all)
else
    if ($etot < $bestener) then
        evaluate ($bestener = $etot)
        evaluate ($bestair = $eair)
        do (refx = x) (all)
        do (refy = y) (all)
        do (refz = z) (all)
    end if
end if

evaluate ($kinter = $SaProtocol.inter_rigid)
@MODULE:scale_inter_mini.cns

evaluate ($unambig_scale = $unambig_scale_store)
evaluate ($ambig_scale = $ambig_scale_store)
evaluate ($hbond_scale = $hbond_scale_store)
evaluate ($symm_scale = $symm_scale_store)

noe 
    scale dist $unambig_scale 
    scale ambi $ambig_scale
    scale hbon $hbond_scale
    scale symm $symm_scale
end
