! randomairs.cns
!    Define random AIRs from solvent accessible residues
!
! ***********************************************************************
! * Copyright 2003-2018 Alexandre Bonvin, Utrecht University.           *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

if ($data.ncomponents > 2) then
    evaluate ($errfile = "FAILED")
    fileexist $errfile end
    if ($result eq false) then
        set display=$errfile end
        display RANDOM DEFINITION OF AIRS FROM SOLVENT ACCESSIBLE RESIDUES ONLY
        display SUPPORTED FOR TWO MOLECULES. USE CENTER-OF-MASS RESTRAINTS INSTEAD
        close $errfile end
    end if
end if
!
! first calculate accessible surface area
!
do (store3 = 0) (all)
surface mode=access rh2o=1.4 sele=(segid $prot_segid_1 and not (resn WAT or resn HOH or resn TIP*)) end
show sum (rmsd) (segid $prot_segid_1 and not (resn WAT or resn HOH or resn TIP*))
do (store3 = rmsd) (segid $prot_segid_1 and not (resn WAT or resn HOH or resn TIP*))
surface mode=access rh2o=1.4 sele=(segid $prot_segid_2 and not (resn WAT or resn HOH or resn TIP*)) end
do (store3 = rmsd) (segid $prot_segid_2 and not (resn WAT or resn HOH or resn TIP*))
!
! normalize by standard residue accessibilities (taken from NACCESS)
!
do (store3 = store3 / 107.95) (resn ALA)
do (store3 = store3 / 134.28) (resn CY*)
do (store3 = store3 / 134.28) (resn CSP)
do (store3 = store3 / 140.39) (resn ASP)
do (store3 = store3 / 140.39) (resn ASH)
do (store3 = store3 / 172.25) (resn GLU)
do (store3 = store3 / 172.25) (resn GLH)
do (store3 = store3 / 199.48) (resn PHE)
do (store3 = store3 /  80.10) (resn GLY)
do (store3 = store3 / 182.88) (resn HIS)
do (store3 = store3 / 182.88) (resn NEP)
do (store3 = store3 / 175.12) (resn ILE)
do (store3 = store3 / 200.81) (resn LYS)
do (store3 = store3 / 200.81) (resn ALY)
do (store3 = store3 / 200.81) (resn MLZ)
do (store3 = store3 / 200.81) (resn MLY)
do (store3 = store3 / 200.81) (resn M3L)
do (store3 = store3 / 178.63) (resn LEU)
do (store3 = store3 / 194.15) (resn MET)
do (store3 = store3 / 194.15) (resn MSE)
do (store3 = store3 / 143.94) (resn ASN)
do (store3 = store3 / 136.13) (resn PRO)
do (store3 = store3 / 136.13) (resn HY3)
do (store3 = store3 / 136.13) (resn HYP)
do (store3 = store3 / 178.50) (resn GLN)
do (store3 = store3 / 238.76) (resn ARG)
do (store3 = store3 / 116.50) (resn SER)
do (store3 = store3 / 116.50) (resn SEC)
do (store3 = store3 / 116.50) (resn SEP)
do (store3 = store3 / 116.50) (resn PNS)
do (store3 = store3 / 139.27) (resn THR)
do (store3 = store3 / 139.27) (resn DDZ)
do (store3 = store3 / 139.27) (resn TOP)
do (store3 = store3 / 151.44) (resn VAL)
do (store3 = store3 / 249.36) (resn TRP)
do (store3 = store3 / 212.76) (resn TYR)
do (store3 = store3 / 212.76) (resn TYP)
do (store3 = store3 / 212.76) (resn PTR)
do (store3 = store3 / 212.76) (resn TYS)
do (store3 = store3 / 402.89) (resn QSR)
! DNA/RNA bases 
do (store3 = store3 / 170.0) (resn A or resn DA)
do (store3 = store3 / 170.0) (resn C or resn DC)
do (store3 = store3 / 170.0) (resn G or resn DG)
do (store3 = store3 / 170.0) (resn T or resn DT)
do (store3 = store3 / 170.0) (resn U)
!
! Define random AIR restraints 
!
evaluate ($icount = 1)
do (store4 = 0) (all)
do (store5 = 0) (all)

! Check if segments defined from which to sample random AIRs
evaluate($nchain1 = 0)
while ($nchain1 < $data.ncomponents) loop nloop1
    evaluate($nchain1 = $nchain1 + 1)
    evaluate($fcounter=0)
    evaluate($samplesurf = false)

    if ($nrair_$nchain1 = 0) then
        evaluate($samplesurf = true)
    end if

    if ($samplesurf eq true) then
        do (store5 = $nchain1) (segid $prot_segid_$nchain1)
        display RANDOM AIRS SAMPLED FROM ENTIRE SURFACE FOR MOLECULE $nchain1
    else
        evaluate ($numseg = $nrair_$nchain1)
        display RANDOM AIRS SAMPLED FROM SEGMENTS FOR MOLECULE $nchain1
        while ($fcounter < $numseg) loop Xflex
            evaluate($fcounter=$fcounter + 1)
            do (store5 = $nchain1) ( resid $rair_sta_$nchain1_$fcounter : $rair_end_$nchain1_$fcounter
                                     and segid $prot_segid_$nchain1)
            display FLEXIBLE SEGMENT NR $fcounter FROM $rair_sta_$nchain1_$fcounter TO $rair_end_$nchain1_$fcounter
        end loop Xflex
    end if
end loop nloop1

!
! Filter out lipids
!
do (store3 = 0) ( resn DPP or resn PCW or resn PEE)
do (store5 = 0) ( resn DPP or resn PCW or resn PEE)

for $atom_id in id ( tag and (attr store5 ne 0)) loop count
    do (store4 = $icount) (byres (id $atom_id))
    show sum (store3) (byres (id $atom_id))
    do (store2 = $result) (byres (id $atom_id))
    evaluate ($icount = $icount + 1)
end loop count

show min(store4) (segid $prot_segid_1 and (attr store5 ne 0))
evaluate ($rmin = $result)

show max(store4) (segid $prot_segid_1 and (attr store5 ne 0))
evaluate ($rmax = $result)

evaluate ($nres = $rmax - $rmin + 1)
display $nres RESIDUE IN MOLECULE A SELECTED FOR RANDOM AIR DEFINITION
if ($nres < 1) then
    display NO RESIDUES IN DEFINED RANAIR SEGMENTS FOR MOLECULE A
    display RANDOM RESTRAINTS DEFINITION FAILED
    display STOPPING...
    stop
end if

if ($nres = 1) then
    evaluate ($iselres1 = $rmax)
else
    evaluate ($done = 0)
    while ($done = 0) loop trial
        evaluate ($iselres1 = 0)
        evaluate ($iselres1 = int(ran() * $rmax) + 1)
        evaluate ($iselres1 = min($iselres1, $rmax))
        show sum (store3) (attribute store4 = $iselres1)
        if ($result > 0.2) then
            evaluate ($done = 1)
        end if
    end loop trial
end if

show min(store4) (segid $prot_segid_2 and (attr store5 ne 0))
evaluate ($rmin = $result)

show max(store4) (segid $prot_segid_2 and (attr store5 ne 0))
evaluate ($rmax = $result)

display $nres RESIDUE IN MOLECULE B SELECTED FOR RANDOM AIR DEFINITION
evaluate ($nres = $rmax - $rmin + 1)
if ($nres < 1) then
    display NO RESIDUES IN DEFINED RANAIR SEGMENTS FOR MOLECULE B
    display RANDOM RESTRAINTS DEFINITION FAILED
    display STOPPING...
    stop
end if

if ($nres = 1) then
    evaluate ($iselres2 = $rmax)
else
    evaluate ($done = 0)
    while ($done = 0) loop trial
        evaluate ($iselres2 = 0)
        evaluate ($iselres2 = int(ran() * ($rmax-$rmin+1)) + $rmin)
        show sum (store3) (attribute store4 = $iselres2)
        if ($result > 0.2) then
            evaluate ($done = 1)
        end if
    end loop trial
end if

show (resid) (attribute store4 = $iselres1 and tag)
evaluate ($selres1 = $result)
show (segid) (attribute store4 = $iselres1 and tag)
evaluate ($selseg1 = $result)
show (resn) (attribute store4 = $iselres1 and tag)
evaluate ($selnam1 = $result)

show (resid) (attribute store4 = $iselres2 and tag)
evaluate ($selres2 = $result)
show (segid) (attribute store4 = $iselres2 and tag)
evaluate ($selseg2 = $result)
show (resn) (attribute store4 = $iselres2 and tag)
evaluate ($selnam2 = $result)

evaluate ($dispname= $output_pdb_filename - ".pdb" + ".disp")
set display=$dispname end

display $selnam1 $selres1 $selseg1

noe class ambig end

noe
    assign (resid $selres1 and segid $prot_segid_1)
           (attr store2 > 0.2 and segid $prot_segid_2 and 
            attr store5 ne 0 and (resid $selres2 or (resid $selres2) around 7.5)) 2.0 2.0 0.0
    assign (resid $selres2 and segid $prot_segid_2)
           (attr store2 > 0.2 and segid $prot_segid_1 and 
            attr store5 ne 0 and (resid $selres1 or (resid $selres1) around 7.5)) 2.0 2.0 0.0
end

for $id in id ((resid $selres1 and attr store2 > 0.2) around 5.0 and tag and segid $selseg1 and not resid $selres1) loop neighbors1
    show (resid) (id $id)
    evaluate ($inres = $result)
    show (segid) (id $id)
    evaluate ($inseg = $result)
    show (resn) (id $id)
    evaluate ($inrsn = $result)
    display $inrsn $inres $inseg
    noe
        assign (resid $inres and segid $prot_segid_1)
               (attr store2 > 0.2 and segid $prot_segid_2 and 
                attr store5 ne 0 and (resid $selres2 or (resid $selres2) around 7.5)) 2.0 2.0 0.0
    end
end loop neighbors1

for $id in id ((resid $selres2 and attr store2 > 0.2) around 5.0 and tag and segid $selseg2 and not resid $selres2) loop neighbors2
    show (resid) (id $id)
    evaluate ($inres = $result)
    show (segid) (id $id)
    evaluate ($inseg = $result)
    show (resn) (id $id)
    evaluate ($inrsn = $result)
    display $inrsn $inres $inseg
    noe
        assign (resid $inres and segid $prot_segid_2)
               (attr store2 > 0.2 and segid $prot_segid_1 and 
                attr store5 ne 0 and (resid $selres1 or (resid $selres1) around 7.5)) 2.0 2.0 0.0
    end
end loop neighbors2

close $dispname end
