
! scoring.cns
!     Minimizes complex and score
!
! ***********************************************************************
! * Copyright 2003-2022 Alexandre Bonvin, Utrecht University.           *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

if ( $log_level = "verbose" ) then
    set message=normal echo=on end
elseif ( $log_level = "normal" ) then
    set message=normal echo=off end
else
    set message=off echo=off end
end if

!==================================================================!
! Initialisation of variables
!==================================================================!

evaluate ($ini_count    =1)

evaluate ($Data.flags.ncs  = false)
evaluate ($Data.flags.sym  = false)
evaluate ($Data.flags.cdih = false)
evaluate ($Data.flags.plan = false)
evaluate ($Data.flags.noe  = false)
evaluate ($Data.flags.dihed = $dihedflag)
evaluate ($Data.flags.elec = $elecflag)
evaluate ($Data.flags.em   = false)
evaluate ($Data.flags.rg   = false)
evaluate ($Data.flags.zres = false)
evaluate ($Data.flags.sani = false)
evaluate ($Data.flags.xrdc = false)
evaluate ($Data.flags.xpcs = false)
evaluate ($Data.flags.dani = false)
evaluate ($Data.flags.vean = false)

evaluate ($Data.noecv = false)
evaluate ($Data.randremoval = false)
evaluate ($refine.keepwater = false)

evaluate ($data.ncomponents=$ncomponents)

evaluate ($nmol=1)
while ($nmol <= $data.ncomponents) loop mol
    evaluate ($toppar.prot_segid_$nmol = $prot_segid_$nmol)
    evaluate ($mol_shape_$nmol = false)
    evaluate ($nmol = $nmol + 1)
end loop mol


! non-bonded parameter set to use
evaluate ($toppar.par_nonbonded = "OPLSX")

!Electrostatics:
evaluate ($Data.flags.dihed =$dihedflag)
evaluate ($Data.flags.elec =$elecflag)
evaluate ($Data.epsilon =$epsilon)
evaluate ($Data.dielec  =$dielec)

!==================================================================!

{* Read paramters and set various force field related variables *}

@MODULE:read_param.cns

parameter
    bond  (resn WAT ) (resn WAT ) 1000 TOKEN
    angle (resn WAT ) (resn WAT ) (resn WAT ) 500 TOKEN
    bond  (resn HOH ) (resn HOH ) 1000 TOKEN
    angle (resn HOH ) (resn HOH ) (resn HOH ) 500 TOKEN
    bond  (resn TIP*) (resn TIP*) 1000 TOKEN
    angle (resn TIP*) (resn TIP*) (resn TIP*) 500 TOKEN
end

igroup
    interaction  (not (resn ANI or resn DAN or resn XAN or resn DUM or resn SHA))
                 (not (resn ANI or resn DAN or resn XAN or resn DUM or resn SHA)) weight * 1 end
    interaction  (resn ANI or resn DAN or resn XAN or resn DUM or resn DUM)
                 (resn ANI or resn DAN or resn XAN or resn DUM or resn DUM) weight * 1 vdw 0.0 elec 0.0 end
    interaction  (resn SHA) (not resn SHA) weight * 0 end
end

flag include bond angle impr vdw end

if ($Data.flags.dihed eq true) then
  flag include dihed end
end if

if ($Data.flags.elec eq true) then
    flag include elec end
    if ($Data.dielec eq "rdie") then
        parameter nbonds eps=$Data.epsilon rdie shift switch end end
        ! shift statement needed first to activate switch (CNS bug?)
    else
        parameter nbonds eps=$Data.epsilon cdie end end
    end if
    parameter nbonds ? end end
else
    evaluate ($elec=0.0)
    flag exclude elec end
end if


{* Check for the presence of ions and add distance restraints / covalent bond == *}

@MODULE:restrain-ions.cns

{* Energy minimisation ========================================================= *}

fix sele = (not all) end

! Short minimization

if ($nemsteps > 0) then
    minimize powell nstep=$nemsteps drop=10 end
end if

{* ======================= calculate free molecules internal energy ============ *}

igroup
    interaction (not (resn ANI or resn DAN or resn XAN or resn SHA or resn WAT or resn HOH or resn TIP* or resn DUM)) 
                (not (resn ANI or resn DAN or resn XAN or resn SHA or resn WAT or resn HOH or resn TIP* or resn DUM)) weight * 1 end
end

do (refx=x) (all)
do (refy=y) (all)
do (refz=z) (all)

fix sele=(resn ANI or resn DAN or resn XAN or resn SHA or resn WAT or resn HOH or resn TIP* or resn DMS) end

inline @MODULE:calc_free-ene.cns

fix sele=(not all) end

do (x = refx) (all)
do (y = refy) (all)
do (z = refz) (all)


{* ===================== calculate complex internal energy *}

evaluate ($kinter = 1.0)

@MODULE:scale_intra_only.cns

evaluate ($elec = 0.0)
evaluate ($eintcplx = 0.0)

energy end

evaluate ($eintcplx = $bond + $angl + $impr + $dihe + $vdw + $elec)


{* ===================== calculate final energies and write structure *}
evaluate ($cdih=0.0)
evaluate ($noe=0.0)
if ($Data.ncomponents > 1) then
    evaluate ($kinter = 1.0)
    @MODULE:scale_inter_final.cns
else
    @MODULE:scale_intra_only.cns
end if

evaluate ($coll = 0.0)
evaluate ($eair = 0.0)
evaluate ($esym = 0.0)
evaluate ($ncs = 0.0)
evaluate ($zhar = 0.0)
evaluate ($dani = 0.0)
evaluate ($sani = 0.0)
evaluate ($vean = 0.0)
evaluate ($xrdc = 0.0)
evaluate ($xpcs = 0.0)
evaluate ($rms_noe=0.0)
evaluate ($violations_noe=0)
evaluate ($rms_test_noe=0.0)
evaluate ($violations_test_noe=0)

energy end
evaluate ($etot = $ener - $noe)
evaluate ($noe = $eair)
evaluate ($etot = $etot + $noe)

inline @MODULE:print_coorheader.cns

coor sele= (not name H* and not resn ANI and not resn XAN and not resn DAN) orient end

write coordinates format=pdbo output=$output_pdb_filename end

set message=normal echo=on end

display OUTPUT: $output_pdb_filename

stop
