"""Test rigidbody module."""
import json
from pathlib import Path

from haddock.modules.sampling.rigidbody import DEFAULT_CONFIG
from haddock.modules.sampling.rigidbody import HaddockModule as RigidBody


DATA_PATH = Path(Path(__file__).resolve().parent, 'data')

CONF_PARAMS = {
    'config_path': DATA_PATH,
    'mode': 'local'
    }


def initialize():
    """Setup the test."""
    # Edit some things in io.json
    golden_io = Path(DATA_PATH, 'io.golden.json')
    io = Path(DATA_PATH, 'io.json')
    # The io.json will be overwritten by the module

    # Change the location of the paths in the io.json
    io_data = json.load(open(str(golden_io)))
    io_data['output'][0]['0']['full_name'] = str(
        Path(DATA_PATH, 'e2aP_1F3G_haddock.pdb').resolve()
        )
    io_data['output'][0]['0']['topology']['full_name'] = str(
        Path(DATA_PATH, 'e2aP_1F3G_haddock.psf').resolve()
        )
    io_data['output'][0]['0']['path'] = str(DATA_PATH)
    io_data['output'][1]['0']['full_name'] = str(
        Path(DATA_PATH, 'hpr_ensemble_1_haddock.pdb').resolve()
        )
    io_data['output'][1]['0']['path'] = str(DATA_PATH)
    io_data['output'][1]['0']['topology']['full_name'] = str(
        Path(DATA_PATH, 'hpr_ensemble_1_haddock.psf').resolve()
        )

    with open(io, 'w') as io_fh:
        json.dump(io_data, io_fh)


def cleanup():
    """Clean the files generated by the test."""
    files_to_be_removed = [
        'rigidbody_1.inp', 'rigidbody_1.out', 'rigidbody_1.pdb',
        'WARNING', 'io.json']
    for element in files_to_be_removed:
        f = Path(DATA_PATH, element).resolve()
        f.unlink(missing_ok=True)


def test_rigidbody():
    """Test the rigidbody module."""
    initialize()

    rigidbody = RigidBody(
        order=1, path=DATA_PATH, initial_params=DEFAULT_CONFIG
        )

    rigidbody.run(sampling=1, **CONF_PARAMS)

    # Test things ================================ #
    # Test if files were generated
    inp_file = Path(DATA_PATH, 'rigidbody_1.inp')
    out_file = Path(DATA_PATH, 'rigidbody_1.out')
    pdb_file = Path(DATA_PATH, 'rigidbody_1.pdb')

    assert inp_file.exists()
    assert out_file.exists()
    assert pdb_file.exists()

    # Some things were saved to the io.json
    #  look into it for things to test
    with open(Path(DATA_PATH, 'io.json')) as fh:
        io_data = json.load(fh)

    # Test the score
    score = io_data['output'][0]['score']
    assert score == 9999.27217

    # Test if the topology is being passed
    topology_list = io_data['output'][0]['topology']
    assert len(topology_list) == 2

    # =========================================== #

    cleanup()
