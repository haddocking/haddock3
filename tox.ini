[tox]
minversion = 3.14.0
ignore_basepython_conflict = true
# these are the environments that will run when you
# execute `tox` in the command-line
# bellow you will find explanations for all environments
envlist =
    py39
    docs
    build
    lint

# configures which environments run with each python version
[testenv]
basepython =
    {py39}: {env:TOXPYTHON:python3.9}
    {build,lint,radon,safety,docs}: {env:TOXPYTHON:python3}
passenv = *

[testenv:py39]
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
# userdevelop is true because HADDOCK3 is expected to be installed from the
# repository.
usedevelop = true
# installs dependencies we need for testing
# by using tox the developer don't need to manage this dependencies
# him/herself
deps =
    -r{toxinidir}/requirements.txt
    coverage
    pytest
    pytest-cov
    hypothesis
    toml
# before running the tests erases any prerecord of coverage
commands_pre =
    coverage erase
# execute pytest
commands =
    pytest --cov --cov-report=term-missing --cov-append --cov-config=.coveragerc --hypothesis-show-statistics {posargs}
# after executing the pytest assembles the coverage reports
commands_post = 
    coverage report
    coverage html
    coverage xml

#[testenv:py39]
#setenv = {[testenv:py38]setenv}
#usedevelop = {[testenv:py38]usedevelop}
#deps = {[testenv:py38]deps}
#commands_pre = {[testenv:py38]commands_pre}
#commands = {[testenv:py38]commands}
#commands_post = {[testenv:py38]commands_post}

[testenv:lint]
skip_install = true
deps =
    flake8>=4
    flake8-print>=5
    flake8-docstrings
    flake8-bugbear
    pygments
    isort
commands =
    #flake8 {posargs:src/haddock tests setup.py docs}
    flake8 {posargs:src/haddock tests setup.py examples/run_tests.py examples/compare_runs.py}
    isort --verbose --check-only --diff {posargs:src/haddock tests setup.py examples/run_tests.py examples/compare_runs.py}

# asserts package build integrity
[testenv:build]
skip_install = true
# setenv here integrates with commit message in .bumpversion.cfg
# we can tests bump2version with an actual commit
setenv =
    COMMIT_MSG = Test commit message
# dependencies needed for code quality checks
# you need to add here any additional dependencies you might need
deps =
    setuptools
    wheel
    twine
    docutils
    check-manifest
    readme-renderer
    bump2version
commands_pre = python {toxinidir}/devtools/clean_dist_check.py
commands =
    python --version
    python setup.py sdist bdist_wheel
    twine check dist/*.whl
    twine check dist/*.tar.gz
    check-manifest {toxinidir}
    bump2version --dry-run --verbose --allow-dirty patch
    bump2version --dry-run --verbose --allow-dirty minor
    bump2version --dry-run --verbose --allow-dirty major
commands_post = python {toxinidir}/devtools/clean_dist_check.py

[testenv:docs]
usedevelop = true
deps =
    -r{toxinidir}/devtools/docs-requirements.txt
commands =
    #python {toxinidir}/devtools/build_defaults_rst.py
    sphinx-build {posargs:-E} -b html docs haddock3-docs
    #sphinx-build -b linkcheck docs haddock3-docs

# code quality assessment. This is not a check in the CI, serves just
# as info for the developer
[testenv:radon]
skip_install = true
deps = radon
commands = 
    radon cc -s --total-average --no-assert {posargs:src/haddock}
    radon mi -m -s {posargs:src/haddock}

# safety checks
[testenv:safety]
skip_install = true
deps = safety
commands = safety check


# CONFIGURATIONS

# favourite configuration for flake8 styling
# https://flake8.pycqa.org/en/latest/#
[flake8]
max_line_length = 80
hang-closing = true
ignore = 
    W293
    W503
    D412
    D105
per-file-ignores =
    setup.py:E501
    src/haddock/clis/cli_bm.py:E128
    src/haddock/clis/cli_dmn.py:T201
    tests/*:D103
    tests/test_gear_pretty_table.py:W291,D103
docstring-convention = numpy


[isort]
line_length = 80
indent = 4
multi_line_output = 8
include_trailing_comma = true
lines_after_imports = 2
sections=FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER
known_first_party = haddock
known_third_party = 
    gdock
    lightdock
    fcc
    jsonpickle
    numpy
    hypothesis
    pytest
